package com.mygdx.shooter;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Dialog;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup;
import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;

public class AdminHome extends CustomScreen {
	
	private  FreeTypeFontGenerator generator = null;
	
	private Skin defaultSkin=null;
	private Skin skin2 = null;
    private TextureAtlas atlas = null;
    
    private BitmapFont button = null;
    private BitmapFont tLabel = null;

	private Stage stage;
	private Stage temp;
	
	private VerticalGroup vGroup;
	private Table table;
	
	private Label titleLabel;
	
	private TextButton register;
	private TextButton login;
	private TextButton instructions;
	private TextButton back;

    OrthographicCamera camera;

    @SuppressWarnings("deprecation")	//suppresses deprecation warnings generated by "generateFont()"
	public AdminHome() {
    	
    	setName("ADMIN_HOME");			//Sets the current activity name
    	
    	//Implements the device's Back button functionality on current activity
    	temp = new Stage(){
    		@Override
	        public boolean keyDown(int keyCode) {
	            if (keyCode == Keys.BACK) {
	            	ScreenManager.getInstance().show("MAIN_MENU", Screens.MAIN_MENU);
	            }
	            return super.keyDown(keyCode);
    		}
    	};
    	setStage(temp);
    	stage = getStage();	
    	
    	//Configures camera settings
        camera = new OrthographicCamera();
        camera.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
               
        generator = ResourceManager.getGenerator();		//fetches font generator
        defaultSkin = ResourceManager.getDefaultSkin(); //fetches default skin
        atlas = ResourceManager.getAtlas();				//fetches textureAtlas			
        skin2 = ResourceManager.getCustomSkin();		//fetches customized skin

        
		button = generator.generateFont(Gdx.graphics.getWidth()/20);	//generates font size for button objects
        tLabel = generator.generateFont(Gdx.graphics.getWidth()/10);	//generates font size for title label objects
       
        LabelStyle titleSkin = new LabelStyle();
        titleSkin.font = tLabel;					//sets font size of the title's label style
        
        //Configurations of text button style
        TextButtonStyle textButtonStyle = new TextButtonStyle();
        textButtonStyle.up = skin2.getDrawable("button.up");
        textButtonStyle.down = skin2.getDrawable("button.down");
        textButtonStyle.pressedOffsetX = 3;
        textButtonStyle.pressedOffsetX = -3;
        textButtonStyle.font= button;     
        
        titleLabel = new Label("Admin Panel", titleSkin);	 //title label instantiation
        
    	Gdx.input.setInputProcessor(stage);		//attaches input process to current activity
    	
    	//Instantiation and configuration of "Register" button
    	register = new TextButton("Register", textButtonStyle);
    	register.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			if (DatabaseManager.rootAdministratorExists()==false){						//if no root administrator exists
    				ScreenManager.getInstance().show("ADMIN_REG_0", Screens.ADMIN_REG_0);	//switch to root administrator registration activity
    			}
    			else if (DatabaseManager.rootAdministratorExists()== true){					//if a root administrator exists
    				ScreenManager.getInstance().show("ADMIN_REG_1", Screens.ADMIN_REG_1);	//switch to secondary administrator registration activity
    			}
    		}
    	});
    	
    	//Instantiation and configuration of "Login" button
    	login = new TextButton("Login", textButtonStyle);
    	login.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			if (DatabaseManager.rootAdministratorExists()==true){						//if a root administrator exists
    				ScreenManager.getInstance().show("ADMIN_LOGIN", Screens.ADMIN_LOGIN);	//switch to administrator login activity
    			}
    			else{	//if no root administrator exists a dialog box provides the appropriate feedback
    				new Dialog("", defaultSkin, "dialog") {
    					protected void result (Object object) {
    					}
    				}.text("No administrator profiles currently exist").button("Ok", true).show(stage);
    			}
    		}
    	});
    	
    	//Instantiation and configuration of "Instructions" button
    	instructions = new TextButton("Instructions", textButtonStyle);
    	instructions.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			ScreenManager.getInstance().show("ADMIN_INSTRUCTIONS", Screens.ADMIN_INSTRUCTIONS);	//switch to administrator instructions activity
    		}
    	});
    	
    	//Instantiation and configuration of "Back" button
    	back = new TextButton("Back", textButtonStyle);
    	back.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			ScreenManager.getInstance().show("MAIN_MENU", Screens.MAIN_MENU);	//switch to "Main Menu" activity
    		}
    	});
    	   	
    	//Instantiates vertical group and attaches labels, text fields and buttons
    	vGroup = new VerticalGroup().space(Gdx.graphics.getWidth()/35).pad(5).fill();	
    	vGroup.addActor(titleLabel); 	
    	vGroup.addActor(register);
    	vGroup.addActor(login);
    	vGroup.addActor(instructions);
    	vGroup.addActor(back);
    	
    	//Main table instantiation and configuration
    	table = new Table();
    	table.add(vGroup);
    	table.pack();
    	
    	//Centers the main table within the screen
    	int xPos = (int) (Gdx.graphics.getWidth() - table.getPrefWidth()) / 2;
    	int yPos = (int) (Gdx.graphics.getHeight() - table.getPrefHeight()) / 2;
    	table.setPosition(xPos, yPos);
    	
    	stage.addActor(ResourceManager.getBackImg());	//attaches background image to stage
    	stage.addActor(table);							//attaches main table to the activity
    	
    }

    
    @Override
    public void render(float delta) {     
        Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
    	stage.act(Gdx.graphics.getDeltaTime());
    	stage.draw();
    	Table.drawDebug(stage);
    }

    
	@Override
	public void resize(int width, int height) {
		stage.getViewport().update(width, height, true);
	}

	@Override
	public void show() {}

	
	@Override
	//Disposes resources to mitigate memory leaks
	public void hide() {
		button.dispose();
		tLabel.dispose();
	    stage.dispose();
	}

	@Override
	public void pause() {}

	
	@Override
	public void resume() {}

	
	@Override
	public void dispose() {}

}


