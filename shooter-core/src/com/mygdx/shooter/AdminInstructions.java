package com.mygdx.shooter;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
import com.badlogic.gdx.scenes.scene2d.utils.Align;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;


public class AdminInstructions extends CustomScreen {

	private  FreeTypeFontGenerator generator = null;
	
	private Skin skin2 = null;
	private TextureAtlas atlas = null;
	
	private BitmapFont header1 = null;
	private BitmapFont header2 = null;
	private BitmapFont header3 = null;
	private BitmapFont txt = null;
	private BitmapFont button = null;
	
	private Stage stage;
	private Stage temp;
	
	private TextButton back;

    OrthographicCamera camera;

    
    @SuppressWarnings("deprecation")	//suppresses deprecation warnings generated by "generateFont()"
	public AdminInstructions() {
    	 	
    	setName("ADMIN_INSTRUCTIONS");	//Sets the current activity name
    	
    	//Implements the device's Back button functionality on this activity
    	temp = new Stage(){
    		@Override
	        public boolean keyDown(int keyCode) {
	            if (keyCode == Keys.BACK) {
	            	ScreenManager.getInstance().show("ADMIN_HOME", Screens.ADMIN_HOME);
	            }
	            return super.keyDown(keyCode);
    		}
	    };
    	setStage(temp);
    	stage = getStage();
    	
    	Gdx.input.setInputProcessor(stage);	//attaches input process to current activity
      
    	//Configures camera settings
        camera = new OrthographicCamera();
        camera.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
           
        generator = ResourceManager.getGenerator();	//fetches font generator
        atlas = ResourceManager.getAtlas();			//fetches textureAtlas
        skin2 = ResourceManager.getCustomSkin();	//fetches customized skin
        
        //Generates font size for objects containing text
        header1 = generator.generateFont(Gdx.graphics.getWidth()/10);
        header2 = generator.generateFont(Gdx.graphics.getWidth()/25);
        header3 = generator.generateFont(Gdx.graphics.getWidth()/35);
        txt = generator.generateFont(Gdx.graphics.getWidth()/45);
        button = generator.generateFont(Gdx.graphics.getWidth()/20);
        
        //Label style instantiations
        LabelStyle header1Skin = new LabelStyle();
        LabelStyle header2Skin = new LabelStyle();
        LabelStyle textSkin = new LabelStyle();
        LabelStyle header3Skin = new LabelStyle();
        
        //Sets font size of various label styles
        header1Skin.font = header1;
        header2Skin.font = header2;
        textSkin.font = txt;
        header3Skin.font = header3;
        
        Label titleLabel = new Label("Instructions", header1Skin);	//title label instantiation
        
        //Instantiations and configurations associated with administrator registration instructions
        Label adminRegister = new Label("Registration", header3Skin);
        String adminRegisterInstructions =  	 "User is required to fill in all fields provided.               \n"
        										+"If a Root Administrator has already been created all subsequent\n"
        										+"registration request must be approved by that administrator.    ";
        final Label register = new Label(adminRegisterInstructions, textSkin);
        register.setAlignment(Align.center);
        register.setWrap(true);
        
        //Instantiations and configurations associated with session creation instructions
        Label createSession = new Label("Session Creation",  header3Skin);
        String createSessionInstructions =  	 "User is required to fill in all fields provided.               \n"
												+"Session creation requires the completion of all three screens.\n"
												+"Ensure that the last six (6) fields in Screen 1 are integers. \n"
												+"Times must be represented in seconds (s).                     \n";
        final Label create = new Label(createSessionInstructions, textSkin);
        create.setAlignment(Align.center);
        create.setWrap(true);
        
        //Instantiations and configurations associated with participant addition instructions
        Label addParticipant = new Label("Adding Particpants",  header3Skin);
        String participantInstructions =  	 "Application provides the facility for the administrator to add    \n"
											+"new participants, subsequent to the creation of the session.";
        final Label add = new Label(participantInstructions, textSkin);
        add.setAlignment(Align.center);
        add.setWrap(true); 
       
        //Instantiations and configurations associated with session viewing instructions
        Label viewSession = new Label("View Session",  header3Skin); 
        String viewSessionInstructions =  	 "This feature provides feedback on the progress of the session.    \n"
											+"Administrators also have the ability to remove particpants who    \n"
											+"have not yet completed their assessments.                          ";
        final Label view = new Label(viewSessionInstructions, textSkin);
        view.setAlignment(Align.center);
        view.setWrap(true);
        
      //Instantiations and configurations associated with session packaging instructions
        Label packageSession = new Label("Package Session",  header3Skin);
        String packagingInstructions =  	 "All scheduled participant of a particular session, must complete  \n"
											+"the assessment before the results can be packaged.                \n"
											+"Results are exported to a .csv file which can be located in       \n"
											+"Results folder of the device's SD Card.                             ";
        final Label packag = new Label(packagingInstructions, textSkin);
        packag.setAlignment(Align.center);
        packag.setWrap(true);
       
        //Configurations of text button style
        TextButtonStyle textButtonStyle = new TextButtonStyle();
        textButtonStyle.up = skin2.getDrawable("button.up");
        textButtonStyle.down = skin2.getDrawable("button.down");
        textButtonStyle.pressedOffsetX = 3;
        textButtonStyle.pressedOffsetX = -3;
        textButtonStyle.font= button;
       
        //Instantiation and configuration of "Back" button
        back = new TextButton("Back", textButtonStyle);
    	back.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			ScreenManager.getInstance().show("ADMIN_HOME", Screens.ADMIN_HOME);	//switch to "Administrator Home" activity
    		}
    	});
    	
    	//Instantiates scroll table and attaches labels, text fields and buttons
        final Table scrollTable = new Table();
        scrollTable.add(titleLabel);
        scrollTable.row();
        
        scrollTable.add(adminRegister);
        scrollTable.row();
        scrollTable.add(register).spaceBottom(Gdx.graphics.getWidth()/70);
        scrollTable.row();
        
        scrollTable.add(createSession);
        scrollTable.row();
        scrollTable.add(create).spaceBottom(Gdx.graphics.getWidth()/70);
        scrollTable.row();
        
        scrollTable.add(addParticipant);
        scrollTable.row();
        scrollTable.add(add).spaceBottom(Gdx.graphics.getWidth()/70);
        scrollTable.row();
        
        scrollTable.add(viewSession);
        scrollTable.row();
        scrollTable.add(view).spaceBottom(Gdx.graphics.getWidth()/70);
        scrollTable.row();
        
        scrollTable.add(packageSession);
        scrollTable.row();
        scrollTable.add(packag).spaceBottom(Gdx.graphics.getWidth()/50);
        scrollTable.row();
       
        scrollTable.add(back);

        final ScrollPane scroller = new ScrollPane(scrollTable);

        final Table table = new Table();
        table.setFillParent(true);
        table.add(scroller).fill().expand();
        
    	stage.addActor(ResourceManager.getBackImg());	//attaches background image to stage
        stage.addActor(table);							//attaches main table to the activity
    }

    
    @Override
    public void render(float delta) {     
        Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
    	stage.act(Gdx.graphics.getDeltaTime());
    	stage.draw();
    	Table.drawDebug(stage);
    }

    
	@Override
	public void resize(int width, int height) {
		stage.getViewport().update(width, height, true);
	}

	
	@Override
	public void show() {}

	
	@Override
	//Disposes resources to mitigate memory leaks
	public void hide() {
		header1.dispose();
        header2.dispose();
        header3.dispose();
        txt.dispose();
        button.dispose();
        stage.dispose();
	}

	
	@Override
	public void pause() {}

	
	@Override
	public void resume() {}

	
	@Override
	public void dispose() {}

}


