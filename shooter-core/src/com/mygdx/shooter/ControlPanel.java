package com.mygdx.shooter;


import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Dialog;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup;
import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.utils.Scaling;


public class ControlPanel extends CustomScreen {

	private  FreeTypeFontGenerator generator = null;
	
	private Skin skin2 = null;
	private Skin skin = null;
    private TextureAtlas atlas = null;
    
    private Label titleLabel;
    
    private BitmapFont button = null;
    private BitmapFont tLabel = null;
    private BitmapFont fLabel = null;

	private Stage temp= null;
	private Stage stage= null;
	
	private VerticalGroup vGroup= null;
	private Table table= null;
	
	private TextButton createSession= null;
	private TextButton addParticipant= null;
	private TextButton viewSession= null;
	private TextButton packageSession= null;
	private TextButton logout = null;
	
    private OrthographicCamera camera;

    @SuppressWarnings("deprecation")	//suppresses deprecation warnings generated by "generateFont()"
	public ControlPanel() {
    
    	setName("MAIN_MENU");			//Sets the current activity name
    	
    	//Implements the device's Back button functionality on current activity
    	temp = new Stage(){
    		@Override
	        public boolean keyDown(int keyCode) {
	            if (keyCode == Keys.BACK) {
	            	DataManager.setActiveAdminID("");
	    			ScreenManager.getInstance().show("MAIN_MENU", Screens.MAIN_MENU);
	            }
	            return super.keyDown(keyCode);
    		}
    	};
    	setStage(temp);
    	stage = getStage();
    		
    	//Configures camera settings
        camera = new OrthographicCamera();
        camera.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

        generator = ResourceManager.getGenerator();	//fetches font generator
        atlas = ResourceManager.getAtlas();			//fetches textureAtlas
        skin = ResourceManager.getDefaultSkin();	//fetches default skin
        skin2 = ResourceManager.getCustomSkin();	//fetches customized skin
        
        //Generates font size for objects containing text
        button = generator.generateFont(Gdx.graphics.getWidth()/24);
        tLabel = generator.generateFont(Gdx.graphics.getWidth()/10);
        fLabel = generator.generateFont(Gdx.graphics.getWidth()/25);
       
        LabelStyle titleSkin = new LabelStyle();
        titleSkin.font = tLabel;
        
        LabelStyle formLabelSkin = new LabelStyle();
        formLabelSkin.font = fLabel;
       
        //Configurations of text button style
        TextButtonStyle textButtonStyle = new TextButtonStyle();
        textButtonStyle.up = skin2.getDrawable("button.up");
        textButtonStyle.down = skin2.getDrawable("button.down");
        textButtonStyle.pressedOffsetX = 3;
        textButtonStyle.pressedOffsetX = -3;
        textButtonStyle.font= button; 
        
        titleLabel = new Label("Control Panel", titleSkin);	//title label instantiation
        	
    	Gdx.input.setInputProcessor(stage);		//attaches input process to current activity

    	

    	//Instantiation and configuration of "Create Session" button
    	createSession = new TextButton("Create Session", textButtonStyle);
    	createSession.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			String currentSession = DatabaseManager.getLastSessionID();	//fetches current session
    			if (currentSession==null){	//if no previous session exists
    				ScreenManager.getInstance().show("CREATE_SESSION_ONE", Screens.CREATE_SESSION_ONE);	//switch to first "Session Configuration" activity
    			}
    			else{
	    			boolean sessionComplete = DatabaseManager.sessionComplete(currentSession);	//determines if previous session is complete
	    			if (sessionComplete==true  || DatabaseManager.isInitialSession()==true){
	    				ScreenManager.getInstance().show("CREATE_SESSION_ONE", Screens.CREATE_SESSION_ONE);	//switch to first "Session Configuration" activity
	    			}
	    			else{	//if current session is not completed, dialog box provides the appropriate feedback
	    				new Dialog("", skin, "dialog") {
	    					protected void result (Object object) {
	    					}
	    				}.text("All participants have not completed the current session.").button("Ok", true).show(stage);	
	    			}
    			}
    		}
    	});
    	
    	//Instantiation and configuration of "Add Participant" button
    	addParticipant = new TextButton("Add Participant", textButtonStyle);
    	addParticipant.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			if (DatabaseManager.getLastSessionID().equals(" ")){	//if no session currently exists, a dialog box provides the appropriate feedback
    				new Dialog("", skin, "dialog") {
    					protected void result (Object object) {
    					}
    				}.text("You must first create a session").button("Ok", true).show(stage);
    			}
    			else{	//if previous session exists
	    			ScreenManager.getInstance().show("ADD_PARTICIPANT", Screens.ADD_PARTICIPANT);	//switch to "Add Participant" activity
    			}
    		}
    	});
    	
    	//Instantiation and configuration of "View Session" button
    	viewSession = new TextButton("View Session", textButtonStyle);
    	viewSession.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			if (DatabaseManager.getLastSessionID().equals(" ")){	//if no session currently exists, a dialog box provides the appropriate feedback
    				new Dialog("", skin, "dialog") {
    					protected void result (Object object) {
    					}
    				}.text("You must first create a session").button("Ok", true).show(stage);
    			}
    			else{
	    			ScreenManager.getInstance().show("VIEW_SESSION", Screens.VIEW_SESSION);		//switch to "View Session" activity
    			}
    		}
    	});
    	
    	//Instantiation and configuration of "Package Session" button
    	packageSession = new TextButton("Package Session", textButtonStyle);
    	packageSession.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			String currentSession = DatabaseManager.getLastSessionID();		//fetches most recent session
    			if (currentSession.equals(" ")){	//if no session currently exists, a dialog box provides the appropriate feedback
    				new Dialog("", skin, "dialog") {
    					protected void result (Object object) {
    					}
    				}.text("You must first create a session").button("Ok", true).show(stage);
    			}
    			else{	//if previous session exists
	    			boolean sessionComplete = DatabaseManager.sessionComplete(currentSession); //determines if previous session is completed
	    			
	    			if (sessionComplete==true){	//if previous session is completed
	    				DatabaseManager.exportResults(currentSession);	//transfer results to database
	    				ScreenManager.getInstance().show("CONTROL_PANEL", Screens.CONTROL_PANEL);	//return to "Control Panel" activity
	    			}
	    			else{
	    				new Dialog("", skin, "dialog") {	//if session is not completed, a dialog box provides the appropriate feedback
	    					protected void result (Object object) {
	    					}
	    				}.text("All participants have not completed the current session.").button("Ok", true).show(stage);	
	    			}
    			}
    		}
    	});
    	
    	//Instantiation and configuration of "Logout" button
    	logout = new TextButton("Logout", textButtonStyle);
    	logout.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			DataManager.setActiveAdminID("");
    			ScreenManager.getInstance().show("MAIN_MENU", Screens.MAIN_MENU);	//switch to "Main Menu" activity
    		}
    	});
    	
    	//Instantiates vertical group and attaches labels, text fields and buttons
    	vGroup = new VerticalGroup().space(Gdx.graphics.getWidth()/50).pad(5).fill();
    	vGroup.addActor(titleLabel);
    	vGroup.addActor(createSession);
    	vGroup.addActor(addParticipant);
    	vGroup.addActor(viewSession);
    	vGroup.addActor(packageSession);
    	vGroup.addActor(logout);
    	
    	table = new Table();
    	table.add(vGroup);
    	table.pack();
    	
    	//Centers table in screen
    	int xPos = (int) (Gdx.graphics.getWidth() - table.getPrefWidth()) / 2;
    	int yPos = (int) (Gdx.graphics.getHeight() - table.getPrefHeight()) / 2;
    	table.setPosition(xPos, yPos);
    	
    	stage.addActor(ResourceManager.getBackImg());	//attaches background image to stage
    	stage.addActor(table);							//attaches main table to the activity
    }

    
    @Override
    public void render(float delta) {  
        Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
    	stage.act(Gdx.graphics.getDeltaTime());
    	stage.draw();
    	Table.drawDebug(stage);
    }

    
	@Override
	public void resize(int width, int height) {
		stage.getViewport().update(width, height, true);	
	}
	
	
	@Override
	public void show() {	
	}

	
	@Override
	public void hide() {	
		button.dispose();
		tLabel.dispose();
	    stage.dispose();
	}

	
	@Override
	public void pause() {}

	
	@Override
	public void resume() {}

	
	@Override
	public void dispose() {}
	
	
	public String declare(){
		return "Main menu screen";
	}


}