package com.mygdx.shooter;

import java.util.regex.Pattern;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Dialog;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.ui.TextField;
import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
import com.badlogic.gdx.scenes.scene2d.ui.TextField.TextFieldStyle;
import com.badlogic.gdx.scenes.scene2d.utils.Align;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.utils.Scaling;

public class Session1 extends CustomScreen{
	
	private  FreeTypeFontGenerator generator = null;
	
	private Skin skin2 = null;
	private Skin skin;
	private Skin textboxskin = null;
    private TextureAtlas atlas = null;
    
    private BitmapFont button = null;
    private BitmapFont tLabel = null;
    private BitmapFont fLabel = null;
    private BitmapFont field = null;
   
    private	Texture uiButton =null;
    private	Texture uiCursor =null;

	private Stage stage;
	private Stage temp;
	
	private TextButton next;
	private TextButton back;
	
	private Label titleLabel;
	private Label sessionIDLabel;
	private Label dateLabel;
	private Label durationLabel;
	private Label cycleTimeLabel;
	private Label targetCountLabel;
	private Label participantCountLabel;
	private Label maxIntervalLabel;
	private Label visibilityLabel;
	
	private TextField sessionIDField;
	private TextField dateField;
	private TextField durationField;
	private TextField cycleTimeField;
	private TextField targetCountField;
	private TextField participantCountField;
	private TextField maxIntervalField;
	private TextField visibilityField;
	
	private Table table0;
	private Table mainTable;
	
	private OrthographicCamera camera;
	
	
	@SuppressWarnings("deprecation")		//suppresses deprecation warnings generated by "generateFont()"
	public Session1(){
		
		setName("CREATE_SESSION_ONE");		//Sets the current activity name
		
		//Implements the device's Back button functionality on current activity
    	temp = new Stage(){
    		@Override
	        public boolean keyDown(int keyCode) {
	            if (keyCode == Keys.BACK) {
	            	ScreenManager.getInstance().show("CONTROL_PANEL", Screens.CONTROL_PANEL);
	            }
	            return super.keyDown(keyCode);
    		}
    	};
    	setStage(temp);
    	stage = getStage();	
  
    	//Configures camera settings
        camera = new OrthographicCamera();
        camera.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
        
        generator = ResourceManager.getGenerator();	//fetches font generator
        atlas = ResourceManager.getAtlas();      	//fetches textureAtlas
        skin = ResourceManager.getDefaultSkin();  	//fetches default skin
        skin2 = ResourceManager.getCustomSkin();	//fetches customized skin

        //Generates font size for objects containing text
		button = generator.generateFont(Gdx.graphics.getWidth()/24);
        tLabel = generator.generateFont(Gdx.graphics.getWidth()/10);
        fLabel = generator.generateFont(Gdx.graphics.getWidth()/25);
        field = generator.generateFont(Gdx.graphics.getWidth()/40);
       
        LabelStyle titleSkin = new LabelStyle();
        titleSkin.font = tLabel;
        
        LabelStyle formLabelSkin = new LabelStyle();
        formLabelSkin.font = fLabel;
        
        //Configurations of text field style
        TextFieldStyle textfieldstyle = new TextFieldStyle();
        textboxskin = new Skin();
        uiButton = new Texture(Gdx.files.internal("ui/button.down.png"));
        uiCursor = new Texture(Gdx.files.internal("ui/cursor.png"));
        textboxskin.add("textfieldback", uiButton); 
        textboxskin.add("cursor", uiCursor); 
        textboxskin.add("font", field);
        textfieldstyle.background= textboxskin.getDrawable("textfieldback");
        textfieldstyle.font=textboxskin.getFont("font");
        textfieldstyle.fontColor= com.badlogic.gdx.graphics.Color.WHITE;
        textfieldstyle.cursor= textboxskin.getDrawable("cursor");
        
        //Configurations of text button style
        TextButtonStyle textButtonStyle = new TextButtonStyle();
        textButtonStyle.up = skin2.getDrawable("button.up");
        textButtonStyle.down = skin2.getDrawable("button.down");
        textButtonStyle.pressedOffsetX = 3;
        textButtonStyle.pressedOffsetX = -3;
        textButtonStyle.font= button;

        titleLabel = new Label("Configure Session", titleSkin);		//title label instantiation
        
        Gdx.input.setInputProcessor(stage);		//attaches input process to current activity
        
        //Label instantiations for form
        sessionIDLabel = new Label("Session ID", formLabelSkin);
        dateLabel = new Label("Date", formLabelSkin); 
        durationLabel = new Label("Duration", formLabelSkin); 
        cycleTimeLabel = new Label("Cycle Time", formLabelSkin); 
        targetCountLabel = new Label("No. of targets", formLabelSkin); 
        participantCountLabel = new Label("No. of participants", formLabelSkin); 
        maxIntervalLabel = new Label("Maximum Interval", formLabelSkin); 
        visibilityLabel = new Label("Visibility Duration", formLabelSkin); 
        
        //Text field instantiations and configuration for form 
        sessionIDField = new TextField (DataManager.getSessionID()!=null?DataManager.getSessionID():"", textfieldstyle);
        dateField = new TextField (DataManager.getSessionDate()!=null?DataManager.getSessionDate():"", textfieldstyle);
        durationField = new TextField (DataManager.getSessionDuration()!=0?Integer.toString(DataManager.getSessionDuration()):"", textfieldstyle);
        cycleTimeField = new TextField (DataManager.getCycleTime()!=0?Integer.toString(DataManager.getCycleTime()):"", textfieldstyle);
        targetCountField = new TextField (DataManager.getSessionTargetCount()!=0?Integer.toString(DataManager.getSessionTargetCount()):"", textfieldstyle);
        participantCountField = new TextField (DataManager.getSessionParticipantCount()!=0?Integer.toString(DataManager.getSessionParticipantCount()):"", textfieldstyle);            
        maxIntervalField = new TextField (DataManager.getIntervalDuration()!=0?Integer.toString(DataManager.getIntervalDuration()):"", textfieldstyle);
        visibilityField = new TextField (DataManager.getVisibilityDuration()!=0?Integer.toString(DataManager.getVisibilityDuration()):"", textfieldstyle);

        //Instantiates tables and attaches labels, text fields and buttons
        mainTable = new Table();
        mainTable.setFillParent(true);
        mainTable.add(titleLabel);
        mainTable.row();
        
        table0 = new Table();
        table0.add(sessionIDLabel).align(Align.left).spaceRight(Gdx.graphics.getWidth()/75).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.add(sessionIDField).width(sessionIDLabel.getWidth()).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.row();
        
        table0.add(dateLabel).align(Align.left).spaceRight(Gdx.graphics.getWidth()/75).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.add(dateField).width(sessionIDLabel.getWidth()).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.row();
        
        table0.add(durationLabel).align(Align.left).spaceRight(Gdx.graphics.getWidth()/75).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.add(durationField).width(sessionIDLabel.getWidth()).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.row();
        
        table0.add(cycleTimeLabel).align(Align.left).spaceRight(Gdx.graphics.getWidth()/75).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.add(cycleTimeField).width(sessionIDLabel.getWidth()).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.row();
        
        table0.add(targetCountLabel).align(Align.left).spaceRight(Gdx.graphics.getWidth()/75).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.add(targetCountField).width(sessionIDLabel.getWidth()).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.row();
        
        table0.add(visibilityLabel).align(Align.left).spaceRight(Gdx.graphics.getWidth()/75).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.add(visibilityField).width(sessionIDLabel.getWidth()).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.row();
        
        table0.add( maxIntervalLabel).align(Align.left).spaceRight(Gdx.graphics.getWidth()/75).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.add(maxIntervalField).width(sessionIDLabel.getWidth()).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.row();

        table0.add(participantCountLabel).align(Align.left).spaceRight(Gdx.graphics.getWidth()/75).spaceBottom((Gdx.graphics.getWidth()/50)*8);
        table0.add(participantCountField).width(sessionIDLabel.getWidth()).spaceBottom((Gdx.graphics.getWidth()/50)*8);
        table0.row();
        
        //Additional Widgets
        Label blankLabel = new Label("Blank", formLabelSkin); 
        blankLabel.setVisible(false);
        TextField blankField = new TextField ("", textfieldstyle);
        blankField.setVisible(false);
        table0.add(blankLabel).align(Align.left).spaceRight(Gdx.graphics.getWidth()/75).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.add(blankField).width(sessionIDLabel.getWidth()).spaceBottom(Gdx.graphics.getWidth()/50);
        table0.row();			



        ScrollPane scroller = new ScrollPane(table0);
        mainTable.add(scroller).fill().expand();
        mainTable.row();
        
        //Instantiation and configuration of "Next" button
        next = new TextButton("Next", textButtonStyle);
        next.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			if (fieldsCompleted()==true){	//if all fields have input data
	    				
    				//if all input data is numeric
	    			if ( 	isNumeric(durationField.getText())==true  && Integer.parseInt(durationField.getText())>0
	    				&&	isNumeric(cycleTimeField.getText())==true  && Integer.parseInt(cycleTimeField.getText())>0
	    				&&  isNumeric(targetCountField.getText())==true && Integer.parseInt(targetCountField.getText())>0
	    				&&	isNumeric(participantCountField.getText())==true  && Integer.parseInt(participantCountField.getText())>0
	    				&&  isNumeric(maxIntervalField.getText())==true  && Integer.parseInt(maxIntervalField.getText())>0
	    				&&  isNumeric(visibilityField.getText())==true  && Integer.parseInt(visibilityField.getText())>0){
	    				
	    				if (validateConfigs() == true){	//if configuration durations are valid
	    					
	    					DateValidator dateValidator = new DateValidator();
	    					if (dateValidator.validate(dateField.getText())==true){	//if date is entered in valid format	
	    						 
	    						//Sets session configurations
			    				DataManager.setSessionID(sessionIDField.getText());
				    			DataManager.setSessionDate(dateField.getText());
				    			DataManager.setSessionDuration(Integer.parseInt(durationField.getText()));
				    			DataManager.setCycleTime(Integer.parseInt(cycleTimeField.getText()));
				    			DataManager.setSessionTargetCount(Integer.parseInt(targetCountField.getText()));
				    			DataManager.setSessionParticipantCount(Integer.parseInt(participantCountField.getText()));
				    			DataManager.setIntervalDuration(Integer.parseInt(maxIntervalField.getText()));
				    			DataManager.setVisibilityDuration(Integer.parseInt(visibilityField.getText()));
				    			
				    			generateOptimalConfigurations();	//generate easy configuration options
				    			generateDifficultConfigurations();	//generate difficult configuration options
				    			ScreenManager.getInstance().show("CREATE_SESSION_TWO", Screens.CREATE_SESSION_TWO);	//switch to "Session Configuration 2" activity
	    					}
	    					else{	//if date is entered in invalid format, a dialog box provides the appropriate feedback
		    					new Dialog("", skin, "dialog") {
			    					protected void result (Object object) {
			    					}
			    				}.text("Date must be in format dd/mm/yyyy").button("Ok", true).show(stage);
		    				}
	    					
	    				}
	    				else{	//if configuration durations are invalid, a dialog box provides the appropriate feedback
	    					new Dialog("", skin, "dialog") {
		    					protected void result (Object object) {
		    					}
		    				}.text("Target count can't be achieved within specified game duration").button("Ok", true).show(stage);
	    				}
	    			}
	    			else{	//if there is a data type mismatch, dialog box provides the appropriate feedback
	    				new Dialog("", skin, "dialog") {
	    					protected void result (Object object) {
	    					}
	    				}.text("Please ensure last six fields are numbers greater than zero").button("Ok", true).show(stage);
	    			}
    			}
    			else{	//if all fields are not completed, a dialog box provides the appropriate feedback
    				new Dialog("", skin, "dialog") {
    					protected void result (Object object) {
    					}
    				}.text("Please complete blank fields").button("Ok", true).show(stage);
    			}
    		}
    	});
        
        //Instantiation and configuration of "Back" button
    	back = new TextButton("Back", textButtonStyle);
    	back.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			ScreenManager.getInstance().show("CONTROL_PANEL", Screens.CONTROL_PANEL);	//switch to "Control Panel" activity
    		}
    	});
    	
    	Table table1 = new Table();
    	table1.add(next).spaceTop(Gdx.graphics.getWidth()/50).spaceRight(Gdx.graphics.getWidth()/25);
    	table1.add(back).spaceTop(Gdx.graphics.getWidth()/50);
   
    	mainTable.add(table1);
    	
    	stage.addActor(ResourceManager.getBackImg());	//attaches background image to stage
    	stage.addActor(mainTable);						//attaches main table to the activity
	}
	 
	
	@Override
	public void render(float delta) {     
		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		stage.act(Gdx.graphics.getDeltaTime());
		stage.draw();
		Table.drawDebug(stage);
	}

	
	@Override
	public void resize(int width, int height) {
		stage.getViewport().update(width, height, true);
	}
	
	
	public int calculateVisibilityDuration(int dur, int targets){
		return dur/targets;
	}
	
	
	public int calculateIntervalDuration(int dur, int targets){		
		return DataManager.getIntervalDuration();
	}

	
	@Override
	public void show() {
	}

	
	@Override
	//Disposes resources to mitigate memory leaks
	public void hide() {
		uiButton.dispose();
		uiCursor.dispose();
		button.dispose();
		tLabel.dispose();
		fLabel.dispose();
		textboxskin.dispose();
	    stage.dispose();
	}

	
	@Override
	public void pause() {}

	@Override
	public void resume() {}

	@Override
	public void dispose() {}
	
	
	//Generate Optimal Configurations
	public void generateOptimalConfigurations(){
		
		int visibilityDuration=5;
		int TimeBetweenTargets=5;
		int targetCount=Integer.parseInt(targetCountField.getText());
		int duration = ( (targetCount * visibilityDuration) + ((targetCount-1) * TimeBetweenTargets) );
		
		DataManager.setOptimalTargetCount(targetCount);
		DataManager.setOptimalGameDuration(duration);
		DataManager.setOptimalVisibilityDuration(visibilityDuration);
		DataManager.setOptimalIntervalDuration(TimeBetweenTargets);
	}
	
	
	//Generate Optimal Configurations
	public void generateDifficultConfigurations(){

		int visibilityDuration=2;
		int TimeBetweenTargets=2;
		int duration = Integer.parseInt(durationField.getText());
		int targetCount = (duration/8)*2;
		
		DataManager.setDifficultTargetCount(targetCount);
		DataManager.setDifficultGameDuration(duration);
		DataManager.setDifficultVisibilityDuration(visibilityDuration);
		DataManager.setDifficultIntervalDuration(TimeBetweenTargets);
	}
	
	
	//Returns true if duration is long enough to facilitate the generation of all targets
	public boolean validateConfigs(){
		int targetCount= Integer.parseInt(targetCountField.getText());
		int visibilityDuration= Integer.parseInt(visibilityField.getText());;
		int TimeBetweenTargets= Integer.parseInt(maxIntervalField.getText());;
		int setDuration = Integer.parseInt(durationField.getText());
		int resultantduration = ( (targetCount * visibilityDuration) + ((targetCount-1) * TimeBetweenTargets) );
		if (resultantduration > setDuration){
			return false;
		}
		return true;
	}
	

	//Returns false if any field is left empty
	public boolean fieldsCompleted(){
		if (sessionIDField.getText().equals("") || dateField.getText().equals("") || 
			durationField.getText().equals("") || targetCountField.getText().equals("") || 
			participantCountField.getText().equals("")  ||
			maxIntervalField.getText().equals("")  ||  visibilityField.getText().equals("") ){
				return false;
		}
		return true;
	}
	
	
	//Returns true if string is numeric value
	public boolean isNumeric(String str){
		for (char c : str.toCharArray()){
			if (!Character.isDigit(c)) 
				return false;
		}
		return true;
	}

}



