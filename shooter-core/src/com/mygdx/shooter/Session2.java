package com.mygdx.shooter;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.CheckBox;
import com.badlogic.gdx.scenes.scene2d.ui.CheckBox.CheckBoxStyle;
import com.badlogic.gdx.scenes.scene2d.ui.Dialog;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.utils.Scaling;

public class Session2 extends CustomScreen{

	private  FreeTypeFontGenerator generator = null;
	
	private Skin skin2 = null;
	private Skin skin;
	private Skin checkBoxSkin = null;
    private TextureAtlas atlas = null;
    
    private BitmapFont button = null;
    private BitmapFont tLabel = null;
    private BitmapFont fLabel = null;
    private BitmapFont fData = null;
     
    private	Texture checkboxOff =null;
    private	Texture checkboxOn =null;

	private Stage stage;
	private Stage temp;
	
	private TextButton next;
	private TextButton back;
	
	private Label titleLabel;
	private Label optionNoLabel;
	private Label durationLabel;
	private Label targetCountLabel;
	private Label visibilityLabel;
	private Label intervalLabel;
	private Label refreshCycle;
	private Label acceptLabel;
	
	//Custom settings
	private Label optionNo1;
	private Label duration1;
	private Label targetCount1;
	private Label visibilityDuration1;
	private Label interval1;
	private Label refreshCycle1;
	private CheckBox acceptOption1;	
	
	//Optimal settings
	private Label optionNo2;
	private Label duration2;
	private Label targetCount2;
	private Label visibilityDuration2;
	private Label interval2;
	private Label refreshCycle2;
	private CheckBox acceptOption2;	
	
	//Difficult settings
	private Label optionNo3;
	private Label duration3;
	private Label targetCount3;
	private Label visibilityDuration3;
	private Label interval3;
	private Label refreshCycle3;
	private CheckBox acceptOption3;	
	
	private Table table0;
	private Table table1;
	private Table mainTable;

	private OrthographicCamera camera;
	
	
	@SuppressWarnings("deprecation")	//suppresses deprecation warnings generated by "generateFont()"
	public Session2(){
		
		setName("CREATE_SESSION_TWO");	//Sets the current activity name
    	
		//Implements the device's Back button functionality on current activity
		temp = new Stage(){
    		@Override
	        public boolean keyDown(int keyCode) {
	            if (keyCode == Keys.BACK) {
	            	ScreenManager.getInstance().show("CREATE_SESSION_ONE", Screens.CREATE_SESSION_ONE);
	            }
	            return super.keyDown(keyCode);
    		}
    	};
    	setStage(temp);
    	stage = getStage();	
  
    	//Configures camera settings
        camera = new OrthographicCamera();
        camera.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

        generator = ResourceManager.getGenerator();	//fetches font generator
        atlas = ResourceManager.getAtlas();      	//fetches default skin
        skin = ResourceManager.getDefaultSkin(); 	//fetches textureAtlas 	
        skin2 = ResourceManager.getCustomSkin();	//fetches customized skin

        //Generates font size for objects containing text
		button = generator.generateFont(Gdx.graphics.getWidth()/24);
        tLabel = generator.generateFont(Gdx.graphics.getWidth()/10);
        fLabel = generator.generateFont(Gdx.graphics.getWidth()/25);
        fData = generator.generateFont(Gdx.graphics.getWidth()/35);
       
        LabelStyle titleSkin = new LabelStyle();
        titleSkin.font = tLabel;
        
        LabelStyle formLabelSkin = new LabelStyle();
        formLabelSkin.font = fLabel;
        
        LabelStyle formDataSkin = new LabelStyle();
        formDataSkin.font = fData;
       
        //Configurations of text button style
        TextButtonStyle textButtonStyle = new TextButtonStyle();
        textButtonStyle.up = skin2.getDrawable("button.up");
        textButtonStyle.down = skin2.getDrawable("button.down");
        textButtonStyle.pressedOffsetX = 3;
        textButtonStyle.pressedOffsetX = -3;
        textButtonStyle.font= button;
     
        //Configurations of check box style
        CheckBoxStyle boxStyle = new CheckBoxStyle();
        checkBoxSkin = new Skin();
        checkboxOff = new Texture(Gdx.files.internal("ui/checkbox_off2.png"));
        checkboxOn = new Texture(Gdx.files.internal("ui/checkbox_on2.png"));
        checkBoxSkin.add("off",  checkboxOff);
        checkBoxSkin.add("on", checkboxOn);
        checkBoxSkin.add("font", fData);
        boxStyle.checkboxOff = checkBoxSkin.getDrawable("off");
        boxStyle.checkboxOn = checkBoxSkin.getDrawable("on");
        boxStyle.font= checkBoxSkin.getFont("font");
        boxStyle.fontColor= com.badlogic.gdx.graphics.Color.WHITE;
        
        titleLabel = new Label("Options", titleSkin);	//title label instantiation
        
        Gdx.input.setInputProcessor(stage);		//attaches input process to current activity
        
        //Label instantiations for table headings
        optionNoLabel = new Label	("          ", formLabelSkin);
    	durationLabel = new Label	("  Duration  ", formLabelSkin);
    	targetCountLabel = new Label("  Targets  ", formLabelSkin);
    	visibilityLabel = new Label	("  Visibility  ", formLabelSkin);
    	intervalLabel = new Label	("  Interval  ", formLabelSkin);
    	acceptLabel = new Label		("  Accept", formLabelSkin);
    	
    	//Label instantiations for custom settings
    	optionNo1 = new Label("Custom", formDataSkin);
    	duration1 = new Label(Integer.toString(DataManager.getSessionDuration()), formDataSkin);
    	targetCount1 = new Label(Integer.toString(DataManager.getSessionTargetCount()), formDataSkin);
    	visibilityDuration1 = new Label(Integer.toString(DataManager.getVisibilityDuration()), formDataSkin);
    	interval1 = new Label(Integer.toString(DataManager.getIntervalDuration()), formDataSkin);
    	acceptOption1 = new CheckBox("", boxStyle);
    	
    	//Label instantiations for easy settings
    	optionNo2 = new Label("Easy", formDataSkin);
    	duration2 = new Label(Integer.toString(DataManager.getOptimalGameDuration()), formDataSkin);
    	targetCount2 = new Label(Integer.toString(DataManager.getOptimalTargetCount()), formDataSkin);
    	visibilityDuration2 = new Label(Integer.toString(DataManager.getOptimalVisibilityDuration()), formDataSkin);
    	interval2 = new Label(Integer.toString(DataManager.getOptimalIntervalDuration()), formDataSkin);
    	acceptOption2 = new CheckBox("", boxStyle);
    	
    	//Label instantiations for difficult settings
    	optionNo3 = new Label("Difficult", formDataSkin);
    	duration3 = new Label(Integer.toString(DataManager.getDifficultGameDuration()), formDataSkin);
    	targetCount3 = new Label(Integer.toString(DataManager.getDifficultTargetCount()), formDataSkin);
    	visibilityDuration3 = new Label(Integer.toString(DataManager.getDifficultVisibilityDuration()), formDataSkin);
    	interval3 = new Label(Integer.toString(DataManager.getDifficultIntervalDuration()), formDataSkin);
    	acceptOption3 = new CheckBox("", boxStyle);
    	
    	//Instantiation and configuration of "Next" button
        next = new TextButton("Next", textButtonStyle);
        next.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			if ( acceptOption1.isChecked()==false &&  acceptOption2.isChecked()==false  && acceptOption3.isChecked()==false){
    				new Dialog("Error", skin, "dialog") {
    					protected void result (Object object) {
    					}
    				}.text("No options have been selected").button("Ok", true).show(stage);
    			}
    			
    			else if (	(acceptOption1.isChecked()==true &&  acceptOption2.isChecked()==true) 
    					||	(acceptOption1.isChecked()==true &&  acceptOption3.isChecked()==true)
    					||	(acceptOption2.isChecked()==true &&  acceptOption3.isChecked()==true) ){
    					new Dialog("Error", skin, "dialog") {
    						protected void result (Object object) {
    						}
    					}.text("You can not select multiple options").button("Ok", true).show(stage);
    			}
    			
    			else if ( acceptOption1.isChecked()==true &&  acceptOption2.isChecked()==false &&  acceptOption3.isChecked()==false){		//option 1 selected
    				DataManager.setSessionDuration(Integer.parseInt(duration1.getText().toString()));
        			DataManager.setSessionTargetCount(Integer.parseInt(targetCount1.getText().toString()));
        			DataManager.setVisibilityDuration(Integer.parseInt(visibilityDuration1.getText().toString()));
        			DataManager.setIntervalDuration(Integer.parseInt(interval1.getText().toString()));
        			DataManager.setOptionSelected(1);
    				ScreenManager.getInstance().show("CREATE_SESSION_THREE", Screens.CREATE_SESSION_THREE);	//switch to "Session Configurtation 3" activity
    			}
    			
    			else if ( acceptOption1.isChecked()==false &&  acceptOption2.isChecked()==true &&  acceptOption3.isChecked()==false){		//option 2 selected
    				DataManager.setOptimalGameDuration(Integer.parseInt(duration2.getText().toString()));
        			DataManager.setOptimalTargetCount(Integer.parseInt(targetCount2.getText().toString()));
        			DataManager.setOptimalVisibilityDuration(Integer.parseInt(visibilityDuration2.getText().toString()));
        			DataManager.setOptimalIntervalDuration(Integer.parseInt(interval2.getText().toString()));
        			DataManager.setOptionSelected(2);
        			ScreenManager.getInstance().show("CREATE_SESSION_THREE", Screens.CREATE_SESSION_THREE);	//switch to "Session Configurtation 3" activity
    			}
    		
    			else if ( acceptOption1.isChecked()==false &&  acceptOption2.isChecked()==false &&  acceptOption3.isChecked()==true){		//option 2 selected
    				DataManager.setDifficultGameDuration(Integer.parseInt(duration3.getText().toString()));
        			DataManager.setDifficultTargetCount(Integer.parseInt(targetCount3.getText().toString()));
        			DataManager.setDifficultVisibilityDuration(Integer.parseInt(visibilityDuration3.getText().toString()));
        			DataManager.setDifficultIntervalDuration(Integer.parseInt(interval3.getText().toString()));
        			DataManager.setOptionSelected(3);
        			ScreenManager.getInstance().show("CREATE_SESSION_THREE", Screens.CREATE_SESSION_THREE);	//switch to "Session Configurtation 3" activity
    			}
    		}
    	});
        
        //Instantiation and configuration of "Next" button
    	back = new TextButton("Back", textButtonStyle);
    	back.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			ScreenManager.getInstance().show("CREATE_SESSION_ONE", Screens.CREATE_SESSION_ONE);
    		}
    	});
    	
    	//Instantiates tables and attaches labels, text fields and buttons
        mainTable = new Table();
        mainTable.add(titleLabel);
        mainTable.row();

        table0 = new Table();
       
        table0.add(optionNoLabel);
        table0.add(durationLabel);
        table0.add(targetCountLabel);
        table0.add(visibilityLabel);
        table0.add(intervalLabel);
        table0.add(refreshCycle);
        table0.add(acceptLabel);
        table0.row();
           
        table0.add(optionNo1);
        table0.add(duration1);
        table0.add(targetCount1);
        table0.add(visibilityDuration1);
        table0.add(interval1);
        table0.add(refreshCycle1);
        table0.add(acceptOption1);
        table0.row();
        
        table0.add(optionNo2);
        table0.add(duration2);
        table0.add(targetCount2);
        table0.add(visibilityDuration2);
        table0.add(interval2);
        table0.add(refreshCycle2);
        table0.add(acceptOption2);
        table0.row(); 
        
        table0.add(optionNo3);
        table0.add(duration3);
        table0.add(targetCount3);
        table0.add(visibilityDuration3);
        table0.add(interval3);
        table0.add(refreshCycle3);
        table0.add(acceptOption3);
               
    	table1= new Table();
    	table1.add(next).spaceRight(Gdx.graphics.getWidth()/25);
    	table1.add(back);
    	
    	mainTable.add(table0);
    	mainTable.row();
    	mainTable.add(table1).spaceTop(Gdx.graphics.getWidth()/25);
    	mainTable.pack();

    	//Centers the main table within the screen
    	int xPos = (int) ( (Gdx.graphics.getWidth()/2) - (mainTable.getPrefWidth() / 2) );
    	int yPos = (int) ( (Gdx.graphics.getHeight()/2) - (mainTable.getPrefHeight() / 2) );
    	mainTable.setPosition(xPos, yPos);
    	
    	stage.addActor(ResourceManager.getBackImg());	//attaches background image to stage
    	stage.addActor(mainTable);    					//attaches main table to the activity
	}
	    
	
	@Override
	public void render(float delta) {     
		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		stage.act(Gdx.graphics.getDeltaTime());
		stage.draw();
		Table.drawDebug(stage);
	}

	
	@Override
	public void resize(int width, int height) {
		stage.getViewport().update(width, height, true);
	}

	
	@Override
	public void show() {}

	@Override
	//Disposes resources to mitigate memory leaks
	public void hide() {
		checkboxOff.dispose();
		checkboxOn.dispose();
		checkBoxSkin.dispose();
		button.dispose();
		tLabel.dispose();
		fLabel.dispose();
	    stage.dispose();
	}

	@Override
	public void pause() {}

	
	@Override
	public void resume() {}

	
	@Override
	public void dispose() {}

}



