package com.mygdx.shooter;


import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.List;
import com.badlogic.gdx.scenes.scene2d.ui.List.ListStyle;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.utils.Scaling;


public class ViewSession extends CustomScreen {

	private  FreeTypeFontGenerator generator = null;
	
	private Skin skin2 = null;
	private Skin skin;
    private TextureAtlas atlas = null;
		
	private OrthographicCamera camera;
	
	private Stage stage;
	private Stage temp;
	
	private Table mainTable;
	
	private Label titleLabel;
	private Label col1;
	private Label col2;	
	
	private BitmapFont button = null;
    private BitmapFont tLabel = null;
    private BitmapFont fLabel = null;
    private BitmapFont fData = null;
    private BitmapFont listData = null;
	
	private List<String> pending=null;	
	
	private TextButton remove;
	private TextButton back;
	
	
    @SuppressWarnings("deprecation")	//suppresses deprecation warnings generated by "generateFont()"
	public ViewSession() {
    	
    	setName("VIEW_SESSION");		//Sets the current activity name
    	
    	//Implements the device's Back button functionality on current activity
    	temp = new Stage(){
    		@Override
	        public boolean keyDown(int keyCode) {
	            if (keyCode == Keys.BACK) {
	            	ScreenManager.getInstance().show("CONTROL_PANEL", Screens.CONTROL_PANEL);
	            }
	            return super.keyDown(keyCode);
    		}
    	};
    	setStage(temp);
    	stage = getStage();
    	
    	//Configures camera settings
        camera = new OrthographicCamera();
        camera.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
        
        generator = ResourceManager.getGenerator();	//fetches font generator
        atlas = ResourceManager.getAtlas(); 		//fetches textureAtlas     
        skin = ResourceManager.getDefaultSkin(); 	//fetches default skin 
        skin2 = ResourceManager.getCustomSkin();	//fetches customized skin
        
        //Generates font size for objects containing text
		button = generator.generateFont(Gdx.graphics.getWidth()/24);
        tLabel = generator.generateFont(Gdx.graphics.getWidth()/10);
        fLabel = generator.generateFont(Gdx.graphics.getWidth()/25);
        fData = generator.generateFont(Gdx.graphics.getWidth()/35);
        listData = generator.generateFont(Gdx.graphics.getWidth()/60);
       
        LabelStyle titleSkin = new LabelStyle();
        titleSkin.font = tLabel;
        
        LabelStyle formLabelSkin = new LabelStyle();
        formLabelSkin.font = fLabel;
        
        LabelStyle formDataSkin = new LabelStyle();
        formDataSkin.font = fData;

        ListStyle listSkin = new ListStyle();
        listSkin.font = listData;
        
        //Configurations of text button style
        TextButtonStyle textButtonStyle = new TextButtonStyle();
        textButtonStyle.up = skin2.getDrawable("button.up");
        textButtonStyle.down = skin2.getDrawable("button.down");
        textButtonStyle.pressedOffsetX = 3;
        textButtonStyle.pressedOffsetX = -3;
        textButtonStyle.font= button;
        
        //Label instantiations
        titleLabel = new Label("Session Progress", titleSkin);  
        col1 = new Label("Pending", formLabelSkin);
        col2 = new Label("Completed", formLabelSkin);
        
    	Gdx.input.setInputProcessor(stage);		//attaches input process to current activity
    	
    	
    	mainTable = new Table();
    	mainTable.add(titleLabel).colspan(2);
    	mainTable.row();
    	
    	mainTable.add(col1);
    	mainTable.add(col2);
    	mainTable.row();
    	
    	String[] pendingList = DatabaseManager.getPendingPlayers(DatabaseManager.getLastSessionID());	//returns list of all most recent session's pending player

    	if (pendingList==null){		//if there are no pending layers
    		Label empty = new Label("No pending players", formDataSkin);
    		mainTable.add(empty).align(2);
    	}
    	else{	//if there are pending players
    		pending = new List<String>(skin);	
        	pending.setItems(pendingList);
        	mainTable.add(pending).align(2);
    	}
    	
    	Object[] completedList= DatabaseManager.getCompletedPlayers(DatabaseManager.getLastSessionID());	//returns list of all players who have completed their assessment
    	if (completedList==null){	//if no players have completed the session
    		Label empty = new Label("No completed assessments", formDataSkin);
    		mainTable.add(empty).align(2);
    	}
    	else{	//if there are players that have completed thier assessment
    		Table temp= createCompleted(completedList, formDataSkin);
    		mainTable.add(temp).align(2);
    	}

    	//Instantiation and configuration of "Remove" button
    	remove = new TextButton("Remove Player", textButtonStyle);
    	remove.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			if (pending!=null){	//if their are pending players
    				String playerID = (String) pending.getSelected();	//fetch the selected player
    				DatabaseManager.deletePlayer(playerID, DatabaseManager.getLastSessionID());	//delete player from the session's schedule
    				ScreenManager.getInstance().show("CONTROL_PANEL", Screens.CONTROL_PANEL);	//switch to "Control Panel" activity
    			}
    		}
    	});
    	
    	//Instantiation and configuration of "Back" button
    	back = new TextButton("Back", textButtonStyle);
    	back.addListener(new ChangeListener() {
    		public void changed (ChangeEvent event, Actor actor) {
    			ScreenManager.getInstance().show("CONTROL_PANEL", Screens.CONTROL_PANEL);	//switch to "Control Panel" activity
    		}
    	});

    	//Instantiates table and attaches buttons
    	mainTable.row();
    	mainTable.add(remove).spaceTop(Gdx.graphics.getWidth()/50).spaceRight(Gdx.graphics.getWidth()/25);
    	mainTable.add(back).spaceTop(Gdx.graphics.getWidth()/50);
    	mainTable.pack();
    	
    	//Centers table in screen
    	int xPos = (int) (Gdx.graphics.getWidth() - mainTable.getPrefWidth()) / 2;
    	int yPos = (int) (Gdx.graphics.getHeight() - mainTable.getPrefHeight()) / 2;
    	mainTable.setPosition(xPos, yPos);
    	

    	stage.addActor(ResourceManager.getBackImg());	//attaches background image to stage
    	stage.addActor(mainTable);						//attaches main table to the activity
    }
    
    
    //Returns a table containing all the players who have completed the game
    public Table createCompleted(Object[] players, LabelStyle skin){

    	Table table = new Table();
    	Label temp=null;
    	String name;
    	for(int i=0 ; i<players.length ; i++){
    		name = (String)players[i];
    		temp = new Label(name, skin);
    		table.add(temp);
    		if (i<=players.length-1){
    			table.row();
    		}	
    	}
    	return table;
    }
    
  		
    @Override
    public void render(float delta) {     
        Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
    	stage.act(Gdx.graphics.getDeltaTime());
    	stage.draw();
    	Table.drawDebug(stage);
    }

    
	@Override
	public void resize(int width, int height) {
		stage.getViewport().update(width, height, true);
	}

	
	@Override
	public void show() {}

	
	@Override
	//Disposes resources to mitigate memory leaks
	public void hide() {
		button.dispose();
		tLabel.dispose();
		fLabel.dispose();
		fData.dispose();
		listData.dispose();
		stage.dispose();
	}

	
	@Override
	public void pause() {}

	
	@Override
	public void resume() {}

	
	@Override
	public void dispose() {}
	
}


